/*
 * i2c.c
 *
 *  Created on: 2025年9月27日
 *      Author: qiu
 */
#include "i2c.h"

void bh1750_init(void)
{
    uint8_t cmd = 0x10;  // BH1750的初始化命令（连续高分辨率模式测量）
    fsp_err_t err = R_IIC_B_MASTER_Open(&I2C_BH1750_ctrl, &I2C_BH1750_cfg);
    if (err != FSP_SUCCESS) {
        printf("I2C初始化失败: %d\n", err);
        return;
    }
    // 获得I2C地址
    //printf("配置的I2C地址: 0x%02lX\n", I2C_BH1750_cfg.slave);

    // 发送BH1750的模式设置命令
    err = R_IIC_B_MASTER_Write(&I2C_BH1750_ctrl, &cmd, 1, false);
    if (err != FSP_SUCCESS) {
        printf("BH1750模式设置失败: %d\n", err);
        return;
    }

    R_BSP_SoftwareDelay(180, BSP_DELAY_UNITS_MILLISECONDS);  // 等待传感器初始化
}

void bh1750_read(void)
{
    uint8_t data[2] = {0};
    uint16_t raw_lux = 0;
    uint32_t lux = 0;
    fsp_err_t err;

    // 读取BH1750的2字节数据（最后一个参数应为false：读完后发送停止位）
    err = R_IIC_B_MASTER_Read(&I2C_BH1750_ctrl, data, 2, false);
    if (err != FSP_SUCCESS) {
        //printf("BH1750读取失败，错误码: %d\n", err);

        return 0;
    }

    R_BSP_SoftwareDelay(180, BSP_DELAY_UNITS_MILLISECONDS);  // 等待

    raw_lux = (data[0] << 8) | data[1];
    lux = (uint32_t)(raw_lux / 1.2f);  // 转换为光照值

    return lux;
}

void BH1750_callback(i2c_master_callback_args_t *p_args)
{
    //防止编译器报错
    (void)p_args;
}
